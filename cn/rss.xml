<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>JS Rocks</title>
        <link>http://jsrocks.org</link>
        <description>A collaborative website about the latest JavaScript features and tools.</description>
        <managingEditor>JS Rocks</managingEditor>
        <webMaster>JS Rocks</webMaster>
        <pubDate>Mon, 01 Feb 2016 12:25:33 GMT</pubDate>
        <language>cn</language>
        <atom:link href="http://jsrocks.org/cn/rss.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>为你的Node.js配置babel 6</title>
            <link>http://jsrocks.org/cn/2016/01/configuring-babel-6-for-node-js</link>
            <description><![CDATA[<p>如果你像我一样在你的Node.js应用上还在使用老的ES5 js代码，那么你可以抛弃之前的习惯，现在就可以使用JavaScript ES2015的特性和ES2016的标准在你的Node.js应用上。ES2015和ES2016让JavaScript宛如清风般一样开发，但是，不是每一个ES2015特性在我们心爱的<a href="https://nodejs.org">Node.js</a>上支持。</p>
<p>这时候<a href="https://babeljs.io">Babel</a>就派上用场了。</p>
]]></description>
            <pubDate>Mon, 04 Jan 2016 02:39:18 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2016/01/configuring-babel-6-for-node-js</guid>
        </item>
        
        <item>
            <title>JavaScript中的 iterables and iterators</title>
            <link>http://jsrocks.org/cn/2015/09/javascript-iterables-and-iterators</link>
            <description><![CDATA[<p>ECMAScript 2015 (ES6) 介绍了两个新的概念，它们密切相关: <strong>iterables</strong> and <strong>iterators</strong>.<br>
希望你在阅读了这篇文章后，会了解到这两个概念的重要性，并且能在日常开发中使用它们。</p>
]]></description>
            <pubDate>Tue, 15 Sep 2015 04:06:02 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2015/09/javascript-iterables-and-iterators</guid>
        </item>
        
        <item>
            <title>我是怎么在项目中使用ES6 模块化的</title>
            <link>http://jsrocks.org/cn/2015/05/how-i-m-using-es6-modules-in-production</link>
            <description><![CDATA[<p>我使用 <a href="/categories/modules/">ES6 modules</a>工作已经有一段时间了，今天我就向大家分享下我是怎么使用ES6 module的。</p>
]]></description>
            <pubDate>Fri, 08 May 2015 04:51:30 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2015/05/how-i-m-using-es6-modules-in-production</guid>
        </item>
        
        <item>
            <title>使用6to5，让今天就来写ES6的模块化开发!</title>
            <link>http://jsrocks.org/cn/2014/11/es6-modules-today-with-6to5</link>
            <description><![CDATA[<p>我之前在Twitter上发过一个照片，表达出我有多快乐，这像是一个时光机让我们可以穿梭到未来-ES6的时代！下面让我来展示如何使用6to5让今天就可以练手ES6的模块化。</p>
]]></description>
            <pubDate>Wed, 05 Nov 2014 15:19:50 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2014/11/es6-modules-today-with-6to5</guid>
        </item>
        
        <item>
            <title>JavaScript ♥ 统一编码</title>
            <link>http://jsrocks.org/cn/2014/10/javascript-unicode</link>
            <description><![CDATA[<p>Mathias Bynens给出了一个非常棒的话题在上一次jsConfEu版本上.
他提出了javascript的统一编码，如果你在字符上花了很多功夫，那你一定要 看一下这个话题.
实际上，即使你没在字符串和javascript花了很多时间，这些由Mathias提出的编码技巧也是很有用的。</p>
]]></description>
            <pubDate>Mon, 13 Oct 2014 19:22:32 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2014/10/javascript-unicode</guid>
        </item>
        
        <item>
            <title>ES6箭头函数和它的作用域</title>
            <link>http://jsrocks.org/cn/2014/10/arrow-functions-and-their-scope</link>
            <description><![CDATA[<p>在ES6很多很棒的新特性中, 箭头函数 (或者大箭头函数)就是其中值得关注的一个! 它不仅仅是很棒很酷, 它很好的利用了作用域, 快捷方便的在现在使用以前我们用的技术, 减少了很多代码......但是如果你不了解箭头函数原理的话可能就有点难以理解. 所以,让我们来看下箭头函数, 就是现在!</p>
]]></description>
            <pubDate>Wed, 01 Oct 2014 04:01:41 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2014/10/arrow-functions-and-their-scope</guid>
        </item>
        
        <item>
            <title>你需要知道的块级作用域 - let</title>
            <link>http://jsrocks.org/cn/2014/08/what-you-need-to-know-about-block-scope-let</link>
            <description><![CDATA[<ul>
<li>译<a href="https://github.com/hacke2">@hacke2</a></li>
</ul>
<p>变量声明在任何语言中都是非常基础的东西，理解变量在作用域下如何工作是非常重要的事情。</p>
<p>在大多数语言中，如<code>Python</code>，他有两个作用域:局部 和 全局。如下，变量定义在代码开头部分则为全局变量，在函数里面声明变量则为局部变量。</p>
]]></description>
            <pubDate>Thu, 28 Aug 2014 01:58:23 GMT</pubDate>
            <guid>http://jsrocks.org/cn/2014/08/what-you-need-to-know-about-block-scope-let</guid>
        </item>
        
    </channel>
</rss>
